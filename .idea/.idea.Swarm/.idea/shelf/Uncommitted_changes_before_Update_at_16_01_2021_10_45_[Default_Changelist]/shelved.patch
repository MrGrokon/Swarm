Index: Assets/Scripts/Prey/BasicPrey.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Collections;\r\nusing System.Collections.Generic;\r\nusing UnityEngine;\r\nusing UnityEngine.AI;\r\n\r\npublic class BasicPrey : PreyAiManager\r\n{\r\n    #region Unity Fonction\r\n    private void Awake()\r\n    {\r\n        _nm_Agent = this.GetComponent<NavMeshAgent>();\r\n        myDetector = this.GetComponent<AiDetection>();\r\n        mySonorDetection = this.GetComponent<AiSoundDetection>();\r\n        _abs_Resc_Manager = this.GetComponent<AbstractedRessourcesManager>();\r\n        _animator = this.GetComponent<Animator>();\r\n        Dust_PS = this.GetComponentInChildren<ParticleSystem>();\r\n\r\n        if(Dust_PS != null){\r\n            Dust_PS.Stop();\r\n        }\r\n        else{\r\n            Debug.Log(\"DustParticule not found\");\r\n        }\r\n        if(_abs_Resc_Manager == null){\r\n            Debug.Log(\"AbstractedRessourcesManager not found\");\r\n        }\r\n        if(MyProfile == null){\r\n            Debug.Log(\"Critical Error: Prey Profile not found\");\r\n        }\r\n        else{\r\n            ChangeState(PreyStates.Roam);\r\n            //normalement change_Nma_Properties() est déja appeler dans changeState()\r\n            Change_NMA_Properties(PreyStates.Roam);\r\n        }\r\n        \r\n    }\r\n\r\n    private void Update()\r\n    {\r\n        #region State Debbuging\r\n        if(MyState == PreyStates.Flee){\r\n            Debug.DrawLine(this.transform.position, _nm_Agent.destination, Color.red);\r\n        }\r\n        else if(MyState == PreyStates.LookingForWater || MyState == PreyStates.LookingForFood ){\r\n            Debug.DrawLine(this.transform.position, _nm_Agent.destination, Color.green);\r\n        }\r\n        else if(MyState == PreyStates.Roam){\r\n            Debug.DrawLine(this.transform.position, _nm_Agent.destination, Color.blue);\r\n        }\r\n        #endregion\r\n\r\n        if(_nm_Agent.remainingDistance <= ReachingDistance){\r\n            //Do things when i reach my Position\r\n            switch(MyState){\r\n                case PreyStates.Flee:\r\n                //TODO: passer en Mode Hide quelques secondes si je le joueur n'est plus a proximité de lui\r\n                _nm_Agent.SetDestination(GetRandomRoamingPosition());\r\n                _animator.SetBool(\"IsRunning\", false);\r\n                Dust_PS.Stop();\r\n                ChangeState(PreyStates.Roam);\r\n                break;\r\n\r\n                case PreyStates.LookingForWater:\r\n                //TODO: rester quelques seconde en position le temps de remplir ses ressources\r\n                _abs_Resc_Manager.RestoreRessources(\"Water\");\r\n                _nm_Agent.SetDestination(GetRandomRoamingPosition());\r\n                ChangeState(PreyStates.Roam);\r\n                break;\r\n                \r\n                case PreyStates.Roam:\r\n                //TODO: générer proproment un nouveau point de roaming, si possible non randomS\r\n                _nm_Agent.SetDestination(GetRandomRoamingPosition());\r\n                ChangeState(PreyStates.Roam);\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (myDetector.FindVisibleTargets() || mySonorDetection.FindVisibleTargets())\r\n        {\r\n            if (MyState != PreyStates.Flee ||\r\n                Vector3.Distance(_nm_Agent.destination, transform.position) <= ReachingDistance)\r\n            {\r\n                //If i found an Enemy\r\n\r\n                //TODO: Test au moment de la detection, selon les behavior a mettre en place:\r\n                //  -chercher à se cacher\r\n                //  -fuire vers le reste de la meute\r\n                //  -...\r\n\r\n                _animator.SetBool(\"IsRunning\", true);\r\n                Dust_PS.Play();\r\n                ChangeState(PreyStates.Flee);\r\n                //ce vector pointe parfois dans la direction du joueur, ce qui implique que le joueur peu la toucher sur sont chemin de fuite\r\n                Vector3 FleeMotion = (Objects.Instance.Alpha.transform.position - this.transform.position) * -1;\r\n                _nm_Agent.SetDestination(FleeMotion);\r\n            }\r\n        }\r\n    }\r\n    #endregion\r\n\r\n    public void ChangeState(PreyStates _state){\r\n        if(MyState != _state){\r\n            Debug.Log(\"ChangeState to \" + _state);\r\n            MyState = _state;\r\n            Change_NMA_Properties(_state);\r\n            OnChangedState(_state);\r\n        }\r\n    }\r\n\r\n    private void OnChangedState(PreyStates _state)\r\n    {\r\n        switch (_state)\r\n        {\r\n            case PreyStates.Flee:\r\n                //ce vector pointe parfois dans la direction du joueur, ce qui implique que le joueur peu la toucher sur son chemin de fuite\r\n                Vector3 FleeMotion = (Objects.Instance.Alpha.transform.position - this.transform.position) * -5;\r\n                NavMesh.SamplePosition(FleeMotion, out NavMeshHit hit, 1f, 1);\r\n                _nm_Agent.SetDestination(hit.position);\r\n                break;\r\n        }\r\n    }\r\n    \r\n    public override void CheckOutFor(string _ressources){\r\n        switch (_ressources){\r\n            case \"Food\":\r\n                ChangeState(PreyStates.Roam);\r\n                //ChangeState(PreyStates.LookingForSomething);\r\n                //_nm_Agent.SetDestination(Objects.Instance.GetCloserRessources(Objects.ObjectType.FoodSource, this.gameObject));\r\n                //_nm_Agent.SetDestination(Objects.Instance.)\r\n            break;\r\n\r\n            case \"Water\":\r\n                ChangeState(PreyStates.LookingForWater);\r\n                _nm_Agent.SetDestination(Objects.Instance.GetCloserRessources(Objects.ObjectType.WaterSource, this.gameObject));\r\n                //Set the destination of my prey to the closer WaterSource\r\n            break;\r\n\r\n            default:\r\n            Debug.Log(\"CheckOutFor() -> parameter wrong or incoherent\");\r\n            break;\r\n        }\r\n    }\r\n\r\n    public override bool IsAlreadyLooking(){\r\n        if(MyState == PreyStates.LookingForWater || MyState == PreyStates.LookingForFood){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public override void Die()\r\n    {\r\n        //Destroy all tracks when the prey die\r\n        //TODO: must be connected later to the HealthSysteme.\r\n        foreach (var track in GetComponent<TracksCreatorOverTime>().PreyTracks)\r\n        {\r\n            Destroy(track);\r\n        }\r\n\r\n        GetComponent<TracksCreatorOverTime>().PreyTracks.Clear();\r\n        Destroy(gameObject);\r\n    }\r\n    \r\n    #region Low Level Functions\r\n\r\n    private Vector3 GetRandomRoamingPosition(){\r\n        //TODO: get a random position on the walkable NavMesh\r\n        Vector3 _randomPos = Random.insideUnitSphere * 10f + this.transform.position;\r\n        NavMeshHit _hit;\r\n        NavMesh.SamplePosition(_randomPos, out _hit, Mathf.Infinity, 1); // 1 == au mask d'area Walkable du navMash\r\n        return _hit.position;\r\n    \r\n    }\r\n\r\n    private void Change_NMA_Properties(PreyStates _state){\r\n        if(_state == PreyStates.Flee){\r\n            _nm_Agent.speed = MyProfile.PreySpeed * MyProfile.SprintSpeedMultiplier;\r\n            _nm_Agent.acceleration = MyProfile.PreyAcceleraration * MyProfile.SprintSpeedMultiplier;\r\n        }\r\n        else{\r\n            _nm_Agent.speed = MyProfile.PreySpeed ;\r\n            _nm_Agent.acceleration = MyProfile.PreyAcceleraration;\r\n        }\r\n    }\r\n    #endregion\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Assets/Scripts/Prey/BasicPrey.cs	(revision dcfaa4fa0f342db04c11e04d8cb5fea0213c4219)
+++ Assets/Scripts/Prey/BasicPrey.cs	(date 1610790297356)
@@ -49,7 +49,7 @@
         }
         #endregion
 
-        if(_nm_Agent.remainingDistance <= ReachingDistance){
+        if(_nm_Agent.remainingDistance <= ReachingDistance)
             //Do things when i reach my Position
             switch(MyState){
                 case PreyStates.Flee:
Index: Assets/Scripts/Managers/GeneratePrey.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Collections;\r\nusing System.Collections.Generic;\r\nusing UnityEngine;\r\nusing UnityEngine.AI;\r\n\r\npublic class GeneratePrey : MonoBehaviour\r\n{\r\n\r\n    [SerializeField] private GameObject terrain;\r\n\r\n    private Vector2 minMaxX;\r\n\r\n    private Vector2 minMaxY;\r\n\r\n    [SerializeField] private int maxPrey;\r\n\r\n    [SerializeField] public List<GameObject> listOfPrey;\r\n\r\n    [SerializeField] private GameObject preyPrefab;\r\n    // Start is called before the first frame update\r\n    void Start()\r\n    {\r\n        minMaxX = new Vector2(-terrain.transform.localScale.x, terrain.transform.localScale.x);\r\n        minMaxY = new Vector2(-terrain.transform.localScale.z, terrain.transform.localScale.z);\r\n    }\r\n\r\n    // Update is called once per frame\r\n    void Update()\r\n    {\r\n        if (listOfPrey.Count < maxPrey)  //Génération des proies\r\n        {\r\n            Vector3 randomSpawnPosition = Random.insideUnitSphere * 200f;\r\n            NavMeshHit hit;\r\n            NavMesh.SamplePosition(randomSpawnPosition, out hit, 200f, NavMesh.AllAreas); //Sample la position donnée sur le navmesh et peut retourner un bool\r\n            var prey = Instantiate(preyPrefab, hit.position, Quaternion.identity);\r\n            listOfPrey.Add(prey);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Assets/Scripts/Managers/GeneratePrey.cs	(revision dcfaa4fa0f342db04c11e04d8cb5fea0213c4219)
+++ Assets/Scripts/Managers/GeneratePrey.cs	(date 1610790288306)
@@ -1,4 +1,4 @@
-using System.Collections;
+﻿using System.Collections;
 using System.Collections.Generic;
 using UnityEngine;
 using UnityEngine.AI;
diff --git .idea/.idea.Swarm/.idea/shelf/Uncommitted_changes_before_Merge_at_07_01_2021_21_26__Default_Changelist_.xml .idea/.idea.Swarm/.idea/shelf/Uncommitted_changes_before_Merge_at_07_01_2021_21_26__Default_Changelist_.xml
diff --git .idea/.idea.Swarm/.idea/shelf/Uncommitted_changes_before_Update_at_13_01_2021_23_12__Default_Changelist_.xml .idea/.idea.Swarm/.idea/shelf/Uncommitted_changes_before_Update_at_13_01_2021_23_12__Default_Changelist_.xml
diff --git .idea/.idea.Swarm/.idea/shelf/Uncommitted_changes_before_Merge_at_07_01_2021_21_27__Default_Changelist_.xml .idea/.idea.Swarm/.idea/shelf/Uncommitted_changes_before_Merge_at_07_01_2021_21_27__Default_Changelist_.xml
diff --git .idea/.idea.Swarm/.idea/shelf/Uncommitted_changes_before_Update_at_13_01_2021_23_13__Default_Changelist_.xml .idea/.idea.Swarm/.idea/shelf/Uncommitted_changes_before_Update_at_13_01_2021_23_13__Default_Changelist_.xml
diff --git .idea/.idea.Swarm/.idea/shelf/unnamed.xml .idea/.idea.Swarm/.idea/shelf/unnamed.xml
diff --git .idea/.idea.Swarm/.idea/shelf/Uncommitted_changes_before_Merge_at_07_01_2021_21_45__Default_Changelist_.xml .idea/.idea.Swarm/.idea/shelf/Uncommitted_changes_before_Merge_at_07_01_2021_21_45__Default_Changelist_.xml
diff --git .idea/.idea.Swarm/.idea/shelf/Default_Changelist1.xml .idea/.idea.Swarm/.idea/shelf/Default_Changelist1.xml
diff --git .idea/.idea.Swarm/.idea/shelf/Uncommitted_changes_before_Checkout_at_07_01_2021_21_25__Default_Changelist_.xml .idea/.idea.Swarm/.idea/shelf/Uncommitted_changes_before_Checkout_at_07_01_2021_21_25__Default_Changelist_.xml
diff --git .idea/.idea.Swarm/.idea/shelf/Uncommitted_changes_before_Update_at_07_01_2021_21_27__Default_Changelist_.xml .idea/.idea.Swarm/.idea/shelf/Uncommitted_changes_before_Update_at_07_01_2021_21_27__Default_Changelist_.xml
